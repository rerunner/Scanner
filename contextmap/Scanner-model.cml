/* The Wafer stage application modeled in CML. */
ContextMap ScannerWaferStageContextMap {

	// Machine Control
	contains MachineControlContext

	/* Measure */	
	contains MeasureManagementContext
	contains StageAlignmentContext /* Horizontal & Vertical Stage Align measure the Reference Point */
	contains WaferAlignmentContext /* Determines the wafer coordinate system by measuring the wafer alignment marks */
	contains LevelingContext /* Leveling, measurement of the wafer heigh map (height differences due to wafer wobble/warping) */
	
	/* Wafer Swap */
	//contains WaferSwapContext /* Swapping the position module, including the wafer, between measure and expose stages */

	/* Expose */
	contains ExposeManagement
	contains ReticleAlignContext /* The reticle contains the image (the integrated circuit pattern) to be printed and is
								  * aligned to the reference point on the Position Module (Using the alignment sensor) */
	contains ExposeContext /* Exposure of the wafer, using the heighmap for vertical beam focus correction */
	/* After exposure the position module is moved back to measure and finally unloaded */
	
	
	/* The expose application can be seen as separated bounded context. 
	 * However, it still shares code with the measuring application (LevelingContext).
	 * Thus, they are in a 'Shared-Kernel' relationship.
	 */
	MachineControlContext [SK]<->[SK] MeasureManagementContext
	MachineControlContext [SK]<->[SK] StageAlignmentContext
	MachineControlContext [SK]<->[SK] LevelingContext
	MachineControlContext [SK]<->[SK] WaferAlignmentContext
	MachineControlContext [SK]<->[SK] ExposeManagement
	MachineControlContext [SK]<->[SK] ExposeContext
	LevelingContext [U,S]->[D,C] ExposeContext
	LevelingContext [U,S]->[D,C] MachineControlContext
	ExposeContext [SK]<->[SK] ReticleAlignContext
	ExposeContext [U,S]->[D,C] MachineControlContext
}

Domain ScannerDomain {
	// Current focus on Wafer stage
	Subdomain MachineControlDomain {
		type = GENERIC_SUBDOMAIN
		domainVisionStatement = "Subdomain managing everything machine control-related."
	}
	Subdomain MeasureDomain {
		type = GENERIC_SUBDOMAIN
		domainVisionStatement = "Subdomain managing everything measure-related."
	}
	Subdomain ExposeDomain {
		type = GENERIC_SUBDOMAIN
		domainVisionStatement = "Subdomain managing everything expose-related."
	}
}

/*******************************************/
/* Machine Control Domain bounded contexts */
/*******************************************/
BoundedContext MachineControlContext implements MachineControlDomain {
	type = SYSTEM
	domainVisionStatement = "Controls the wafer measure and expose processes."
	responsibilities = "MachineControl, Recipes"
	implementationTechnology = "C++"

	Aggregate Lot {
		ValueObject Uuid {
			string id;
		}

		Entity Lot {
			aggregateRoot

			- Uuid id_
			- List<Uuid> waferIds_

			def Uuid GetLotId();
			Repository LotRepository {
	                 @Lot find(@Uuid lotId) throws LotNotFoundException;
	                 List<@Lot> findAll;
	                 store(@Lot lot);
	                 @Uuid nextLotId();
				}
		}
	}

	/* Life of a Wafer: Wafer goes through a set of states:
	 * Wafer in Machine -> Prealigned -> Measured -> Approved for expose side -> exposed -> Unloaded
	 * Can be rejected at multiple points.
	 * After processing the state can be: Processed, rejected, aborted, lost, stopped, skipped.
	 */
	Aggregate Wafer {
		Entity Wafer {
			aggregateRoot

			- Uuid waferId

			def @Uuid GetWaferId();
		}
	}
}


/***********************************/
/* Measure Domain bounded contexts */
/***********************************/
BoundedContext StageAlignmentContext implements MeasureDomain {
	type = SYSTEM
	domainVisionStatement = "Stage Align measures the Reference Point of the Wafer on the Chuck for alignment purposes."
	responsibilities = "Alignment, ReferencePoint"
	implementationTechnology = "C++"

	Aggregate StageAlignment {
		Entity ReferencePoint {
			aggregateRoot

			/* To distinguish references from simple attributes, declarations of references starts with a -. 
				* In the same way as in other places you must also use an @ in front of the declaration when 
				* referring to a Domain Object. */
			- ReferencePointId referencePointId
			- HorizontalStageAlignment hsa
			- VerticalStageAlignment vsa

			def void ReferencePoint(@WaferId waferId); // Constructor with WaferID as foreign key

			def @ReferencePoint GetReferencePoint(); // Return reference to reference point

			Repository StageAlignmentRepository {
					@ReferencePoint find(@ReferencePointId referencePointId) throws ReferencePointNotFoundException;
					List<@ReferencePoint> findAll;
					store(@ReferencePoint rPoint);
					@ReferencePointId nextReferencePointId();
			}
		}

		ValueObject ReferencePointId {
			string id;
		}

		ValueObject HorizontalStageAlignment {
			// Filled by sensor input
			double xpos
			double ypos
		}

		ValueObject VerticalStageAlignment {
			// Filled by sensor input
			double xpos
			double ypos
		}
	}
}

BoundedContext WaferAlignmentContext implements MeasureDomain {
	type = SYSTEM
	domainVisionStatement = "Wafer aligment determines the wafer coordinate system by measuring the wafer alignment marks."
	responsibilities = "WaferAlignment, WCS"
	implementationTechnology = "C++"

	Aggregate AlignmentMarks {
		Entity WaferCoordinateSystem {
			aggregateRoot
			
			- WaferCoordinateSystemId waferCoordinateSystemId_
			- List<AlignmentMark> alignmentMarks
			- WaferDisplacementCoordinates waferDisplacementCoordinates_

			def void WaferCoordinateSystem(@WaferId waferId); // Constructor with WaferID as foreign key to a different aggregate root "Wafer"
			def @WaferDisplacementCoordinates GetWaferDisplacementCoordinates(); // Return the coordinate system for the aligned wafer
			/* Vectors are also used to represent directional quantities, such as a displacement, direction, or derivative. 
			 * A displacement is a difference between points, e.g., q−p gives the amount that would need to be moved in both 
			 * the X and Y direction to move from P to Q, where q gives the coordinates of Q relative to the same reference frame. 
			 * It has both a direction and a magnitude. In contrast, a direction does not have magnitude, and is a unit vector. 
			 */
			/* The coordinates of a point p after translation by a displacement d can be computed by vector addition p+d. 
			 * Interpolation and extrapolation between points p, q is specified by the equation x(u)=(1−u)p+uq
			 *
			 * Ergo: the wafer coordinate system reports the calculed displacement based on the aligned marker position. 
			 */
			Repository WaferCoordinateSystemRepository {
				@WaferCoordinateSystem find(@AlignmentMark alignmentMark);
				List<@WaferCoordinateSystem> findAll();
			}
		}

		ValueObject WaferCoordinateSystemId {
			string id;
		}
		
		/* describe the projected position of an alignment marker in 2D space */
		ValueObject AlignmentMark {
			- MarkPosition alignedPosition_
			- MarkMeasurementSpecification markMeasurementSpecification_

			def AlignmentMark(@MarkMeasurementSpecification markMeasurementSpecification);
			def MarkPosition GetAlignedPosition();
		}

		ValueObject MarkMeasurementSpecification {
			- MarkPosition expectedPosition_
			int alignmentStep_

			def MarkMeasurementSpecification(int alignmentStep, @MarkPosition expectedPosition);
			def MarkMeasurementSpecification GetMarkMeasurementSpecification();
		}

		ValueObject MarkPosition {
			double xpos_
			double ypos_

			def MarkPosition(double xpos, double ypos);
			def double GetX();
			def double GetY();
		}

		ValueObject WaferDisplacementCoordinates {
			double xpos_
			double ypos_

			def WaferDisplacementCoordinates(double xpos, double ypos);
			def double GetX();
			def double GetY();
		}
	}
}


/* The Measure heightmap application context. 
 */
BoundedContext MeasureManagementContext implements MeasureDomain {

	Application MeasureManagementApplicationLayer {
		Command MeasureWafer {
			- WaferId waferIdToMeasure;
		}

		//CQRS events
		Event MeasureWaferCompleted {
			- WaferId waferIdToMeasure
      		Date timestamp
		}
	}
}

BoundedContext LevelingContext implements MeasureDomain {
	type = SYSTEM
	domainVisionStatement = "Leveling measures any point of a wafer and records its height (z-axis)."
	responsibilities = "WaferMeasurement, HeightMap"
	implementationTechnology = "C++"

	Aggregate WaferHeightMap {
		Entity WaferHeightMap {
			aggregateRoot
			
			- WaferHeightMapId waferHeightMapId
			- private List<Measurement> measurementsList

			def void WaferHeightMap(@WaferId waferId); // Constructor with WaferID as foreign key to a different aggregate root "Wafer"
			def void WaferHeightMap(@WaferId waferId, @Measurement firstMeasurement); // Constructor with initial measurement

			def @WaferHeightMap GetWaferHeightMap(); // Return the whole heightmap for the wafer

			def @WaferId GetWaferId(); // Return the wafer Id of the heightmap
			
			def private void AddMeasurement(@Measurement measurement); // Add one measurement to measurementsList that make the heightmap
			// Note: The wafer heightmap is a list of measurements at different points, It does not control the actual sensors.			

			Repository WaferHeightMapRepository {
					@WaferHeightMap find(@WaferHeightMapId waferHeightMapId) throws WaferHeightMapNotFoundException;
					List<@WaferHeightMap> findAll;
					store(@WaferHeightMap heightMap);
					@WaferHeightMapId nextWaferHeightMapId();
			}
		}

		ValueObject WaferHeightMapId {
			string id;
		}
		
		ValueObject Measurement {
			- Position position_
			double z_

			def Measurement(@Position position, double z); 
			def Position GetPosition();
			def double GetZ();
		}
		
		ValueObject Position {
			double xpos_
			double ypos_

			def Position(double xpos, double ypos);
			def double GetX();
			def double GetY();
		}
	}

}



/********************************/
/* Expose side bounded contexts */
/********************************/
/* The Expose application context. 
 */
BoundedContext ExposeManagement implements ExposeDomain {

	Application ExposeManagementApplicationLayer {
		Command ExposeWafer {
			- WaferId waferIdToExpose;
		}

		//CQRS events
		Event ExposeWaferCompleted {
			- WaferId waferIdToExpose
      		Date timestamp
		}
	}
}


BoundedContext ReticleAlignContext implements ExposeDomain {
	type = SYSTEM
	domainVisionStatement = "Aligns the image to be printed to the reference point on the Position Module (Using the alignment sensor)."
	responsibilities = "ImageAlignment"
	implementationTechnology = "C++"

	Aggregate ImageAlignment {
		Entity ImageAlignment {
			aggregateRoot
			
			- ImageAlignmentId imageAlignmentId
			
			Repository ImageAlignmentRepository {
				@ImageAlignment find(@ImageAlignmentId imageAlignmentId) throws ImageAlignmentNotFoundException;
				List<@ImageAlignment> findAll;
				store(@ImageAlignment imageAlignment);
				@ImageAlignmentId nextImageAlignmentId();
			}
		}

		ValueObject ImageAlignmentId {
			string id
		}
	}
}


BoundedContext ExposeContext implements ExposeDomain {
	type = SYSTEM
	domainVisionStatement = "Exposes/Prints images on the wafer."
	responsibilities = "Exposures"
	implementationTechnology = "C++"

	Aggregate Image {
		Entity Image {
			aggregateRoot
			
			- ImageId imageId
			
			Repository ImageRepository {
				@Image find(@ImageId imageId) throws ImageNotFoundException;
				List<@Image> findAll;
				store(@Image image);
				@ImageId nextImageId();
			}
		}

		ValueObject ImageId {
			string id
		}
	}
}
