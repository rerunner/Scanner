/***********************************/
/* Measure Domain bounded contexts */
/***********************************/
BoundedContext StageAlignmentContext implements MeasureDomain {
	type = SYSTEM
	domainVisionStatement = "Stage Align measures the Reference Point of the Wafer on the Chuck for alignment purposes."
	responsibilities = "Alignment, ReferencePoint"
	implementationTechnology = "C++"

	Aggregate StageAlignment {
		Entity ReferencePoint {
			aggregateRoot

			/* To distinguish references from simple attributes, declarations of references starts with a -. 
				* In the same way as in other places you must also use an @ in front of the declaration when 
				* referring to a Domain Object. */
			- ReferencePointId referencePointId
			- HorizontalStageAlignment hsa
			- VerticalStageAlignment vsa

			def void ReferencePoint(@WaferId waferId); // Constructor with WaferID as foreign key

			def @ReferencePoint GetReferencePoint(); // Return reference to reference point

			Repository StageAlignmentRepository {
					@ReferencePoint find(@ReferencePointId referencePointId) throws ReferencePointNotFoundException;
					List<@ReferencePoint> findAll;
					store(@ReferencePoint rPoint);
					@ReferencePointId nextReferencePointId();
			}
		}

		ValueObject ReferencePointId {
			string id;
		}

		ValueObject HorizontalStageAlignment {
			// Filled by sensor input
			double xpos
			double ypos
		}

		ValueObject VerticalStageAlignment {
			// Filled by sensor input
			double xpos
			double ypos
		}
	}
}

BoundedContext WaferAlignmentContext implements MeasureDomain {
	type = SYSTEM
	domainVisionStatement = "Wafer aligment determines the wafer coordinate system by measuring the wafer alignment marks."
	responsibilities = "WaferAlignment, WCS"
	implementationTechnology = "C++"

	Aggregate AlignmentMarks {
		Entity WaferCoordinateSystem {
			aggregateRoot
			
			- WaferCoordinateSystemId waferCoordinateSystemId_
			- List<AlignmentMark> alignmentMarks
			- WaferDisplacementCoordinates waferDisplacementCoordinates_

			def void WaferCoordinateSystem(@WaferId waferId); // Constructor with WaferID as foreign key to a different aggregate root "Wafer"
			def @WaferDisplacementCoordinates GetWaferDisplacementCoordinates(); // Return the coordinate system for the aligned wafer
			/* Vectors are also used to represent directional quantities, such as a displacement, direction, or derivative. 
			 * A displacement is a difference between points, e.g., q−p gives the amount that would need to be moved in both 
			 * the X and Y direction to move from P to Q, where q gives the coordinates of Q relative to the same reference frame. 
			 * It has both a direction and a magnitude. In contrast, a direction does not have magnitude, and is a unit vector. 
			 */
			/* The coordinates of a point p after translation by a displacement d can be computed by vector addition p+d. 
			 * Interpolation and extrapolation between points p, q is specified by the equation x(u)=(1−u)p+uq
			 *
			 * Ergo: the wafer coordinate system reports the calculed displacement based on the aligned marker position. 
			 */
			Repository WaferCoordinateSystemRepository {
				@WaferCoordinateSystem find(@AlignmentMark alignmentMark);
				List<@WaferCoordinateSystem> findAll();
			}
		}

		ValueObject WaferCoordinateSystemId {
			string id;
		}
		
		/* describe the projected position of an alignment marker in 2D space */
		ValueObject AlignmentMark {
			- MarkPosition alignedPosition_
			- MarkMeasurementSpecification markMeasurementSpecification_

			def AlignmentMark(@MarkMeasurementSpecification markMeasurementSpecification);
			def MarkPosition GetAlignedPosition();
		}

		ValueObject MarkMeasurementSpecification {
			- MarkPosition expectedPosition_
			int alignmentStep_

			def MarkMeasurementSpecification(int alignmentStep, @MarkPosition expectedPosition);
			def MarkMeasurementSpecification GetMarkMeasurementSpecification();
		}

		ValueObject MarkPosition {
			double xpos_
			double ypos_

			def MarkPosition(double xpos, double ypos);
			def double GetX();
			def double GetY();
		}

		ValueObject WaferDisplacementCoordinates {
			double xpos_
			double ypos_

			def WaferDisplacementCoordinates(double xpos, double ypos);
			def double GetX();
			def double GetY();
		}
	}
}


BoundedContext LevelingContext implements MeasureDomain {
	type = SYSTEM
	domainVisionStatement = "Leveling measures any point of a wafer and records its height (z-axis)."
	responsibilities = "WaferMeasurement, HeightMap"
	implementationTechnology = "C++"

	Aggregate WaferHeightMap {
		Entity WaferHeightMap {
			aggregateRoot
			
			- private List<Measurement> measurementsList

			def void WaferHeightMap(@Uuid waferId); // Constructor with WaferID as foreign key to a different aggregate root "Wafer"
			def void WaferHeightMap(@Uuid waferId, @Measurement firstMeasurement); // Constructor with initial measurement

			def @WaferHeightMap GetWaferHeightMap(); // Return the whole heightmap for the wafer
			
			def private void AddMeasurement(@Measurement measurement); // Add one measurement to measurementsList that make the heightmap
			// Note: The wafer heightmap is a list of measurements at different points, It does not control the actual sensors.			

			Repository WaferHeightMapRepository {
					@WaferHeightMap find(@Uuid waferHeightMapId) throws WaferHeightMapNotFoundException;
					List<@WaferHeightMap> findAll;
					store(@WaferHeightMap heightMap);
					@Uuid nextWaferHeightMapId();
			}
		}
		
		ValueObject Measurement {
			Position position_
			double z_

			def Measurement(@Position position, double z); 
			def Position GetPosition();
			def double GetZ();
		}
		
		ValueObject Position {
			double xpos_
			double ypos_

			def Position(double xpos, double ypos);
			def double GetX();
			def double GetY();
		}
	}

}

