/* Generated by /home/rerun/Projects/OpenDDS/bin/opendds_idl version 3.27.0 (ACE version 6.5.20) running on input file /home/rerun/Projects/LithoFab/Scanner/build/Scanner.idl */
#include "ScannerTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/XTypes/TypeObject.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"
#include "dds/DCPS/JsonValueReader.h"
#include "dds/DCPS/JsonValueWriter.h"

#ifdef OPENDDS_IDL_FILE_SPECIFIC
#  undef OPENDDS_IDL_FILE_SPECIFIC
#endif
#define OPENDDS_IDL_FILE_SPECIFIC(base, index) opendds_idl_generated_scannertypesupportimpl_cpp_8d5dxf##_##base##index



/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: scanner */



/* Begin MODULE: generated */



/* Begin CONST: WAFER_HEIGHTMAP_TOPIC */


/* End CONST: WAFER_HEIGHTMAP_TOPIC */


/* Begin CONST: MAX_MEASUREMENT_STEPS */


/* End CONST: MAX_MEASUREMENT_STEPS */


/* Begin STRUCT: Position */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<scanner_generated_Position_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(187, 197, 108, 182, 252, 161, 177, 226, 47, 20, 220, 110, 85, 170));
  }
  return ti;
}

static const XTypes::TypeMap& OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
template<> const XTypes::TypeMap& getMinimalTypeMap<scanner_generated_Position_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::scanner::generated::Position& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"xPos",0},{"yPos",1},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct()) return false;
  XTypes::MemberId member_id;
  while (value_reader.begin_struct_member(member_id, helper)) {
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.xPos)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.yPos)) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::scanner::generated::Position& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_struct_member(XTypes::MemberDescriptorImpl("xPos", false));
  value_writer.write_int32(value.xPos);
  value_writer.end_struct_member();
  value_writer.begin_struct_member(XTypes::MemberDescriptorImpl("yPos", false));
  value_writer.write_int32(value.yPos);
  value_writer.end_struct_member();
  value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::scanner::generated::Position& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.xPos = 0;
  stru.yPos = 0;
}

void serialized_size(const Encoding& encoding, size_t& size, const ::scanner::generated::Position& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.xPos);
  primitive_serialized_size(encoding, size, stru.yPos);
}

bool operator<<(Serializer& strm, const ::scanner::generated::Position& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.xPos)
    && (strm << stru.yPos);
}

bool operator>>(Serializer& strm,  ::scanner::generated::Position& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.xPos = 0;
  } else {
    if (!(strm >> stru.xPos)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.yPos = 0;
  } else {
    if (!(strm >> stru.yPos)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::scanner::generated::Position>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.xPos);
  primitive_serialized_size(encoding, size, stru.value.yPos);
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::scanner::generated::Position>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.xPos)
    && (strm << stru.value.yPos);
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::scanner::generated::Position>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.xPos = 0;
  } else {
    if (!(strm >> stru.value.xPos)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.yPos = 0;
  } else {
    if (!(strm >> stru.value.yPos)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::scanner::generated::Position> : MetaStruct {
  typedef  ::scanner::generated::Position T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::scanner::generated::Position& typed = *static_cast<const ::scanner::generated::Position*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "xPos") == 0) {
      return typed.xPos;
    }
    if (std::strcmp(field, "yPos") == 0) {
      return typed.yPos;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::scanner::generated::Position)");
  }

  Value getValue(Serializer& strm, const char* field, const TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      throw std::runtime_error("Unable to reader delimiter in getValue");
    }
  }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "xPos") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'xPos' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'xPos' could not be skipped");
      }
    }
    if (base_field == "yPos") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'yPos' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'yPos' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "xPos") == 0) {
      return make_field_cmp(&T::xPos, next);
    }
    if (std::strcmp(field, "yPos") == 0) {
      return make_field_cmp(&T::yPos, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::scanner::generated::Position)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"xPos", "yPos", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "xPos") == 0) {
      return &static_cast<const T*>(stru)->xPos;
    }
    if (std::strcmp(field, "yPos") == 0) {
      return &static_cast<const T*>(stru)->yPos;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::scanner::generated::Position)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "xPos") == 0) {
      static_cast<T*>(lhs)->xPos = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "yPos") == 0) {
      static_cast<T*>(lhs)->yPos = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::scanner::generated::Position)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "xPos") == 0) {
      return static_cast<const T*>(lhs)->xPos == static_cast<const T*>(rhs)->xPos;
    }
    if (std::strcmp(field, "yPos") == 0) {
      return static_cast<const T*>(lhs)->yPos == static_cast<const T*>(rhs)->yPos;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::scanner::generated::Position)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::scanner::generated::Position>()
{
  static MetaStructImpl< ::scanner::generated::Position> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::scanner::generated::Position*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::scanner::generated::Position>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::scanner::generated::Position,  ::scanner::generated::Position > : public DynamicDataAdapter_T< ::scanner::generated::Position> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::scanner::generated::Position& value)
    : DynamicDataAdapter_T< ::scanner::generated::Position>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::scanner::generated::Position& value)
    : DynamicDataAdapter_T< ::scanner::generated::Position>(type, value)
  {
  }

  DDS::UInt32 get_item_count()
  {
    return 2;
  }

  DDS::DynamicData_ptr clone()
  {
    return new DynamicDataAdapterImpl(type_, value_);
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::scanner::generated::Position> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::scanner::generated::Position> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.xPos, id);
      }
    case 1:
      {
        return get_simple_raw_value(method, dest, tk, value_.yPos, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.xPos, id, source, tk);
      }
    case 1:
      {
        return set_simple_raw_value(method, value_.yPos, id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::scanner::generated::Position,  ::scanner::generated::Position>(DDS::DynamicType_ptr type, const  ::scanner::generated::Position& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::scanner::generated::Position,  ::scanner::generated::Position>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::scanner::generated::Position,  ::scanner::generated::Position>(DDS::DynamicType_ptr type,  ::scanner::generated::Position& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::scanner::generated::Position,  ::scanner::generated::Position>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::scanner::generated::Position* get_dynamic_data_adapter_value< ::scanner::generated::Position,  ::scanner::generated::Position>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::scanner::generated::Position,  ::scanner::generated::Position> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Position */


/* Begin STRUCT: Measurement */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<scanner_generated_Measurement_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(248, 246, 214, 124, 130, 218, 238, 220, 67, 58, 4, 117, 148, 168));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<scanner_generated_Measurement_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::scanner::generated::Measurement& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"xyPosition",0},{"zPos",1},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct()) return false;
  XTypes::MemberId member_id;
  while (value_reader.begin_struct_member(member_id, helper)) {
    switch (member_id) {
    case 0: {
      if (!vread(value_reader, value.xyPosition)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.zPos)) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::scanner::generated::Measurement& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_struct_member(XTypes::MemberDescriptorImpl("xyPosition", false));
  vwrite(value_writer, value.xyPosition);
  value_writer.end_struct_member();
  value_writer.begin_struct_member(XTypes::MemberDescriptorImpl("zPos", false));
  value_writer.write_int32(value.zPos);
  value_writer.end_struct_member();
  value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::scanner::generated::Measurement& stru)
{
  ACE_UNUSED_ARG(stru);
  set_default(stru.xyPosition);
  stru.zPos = 0;
}

void serialized_size(const Encoding& encoding, size_t& size, const ::scanner::generated::Measurement& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  serialized_size(encoding, size, stru.xyPosition);
  primitive_serialized_size(encoding, size, stru.zPos);
}

bool operator<<(Serializer& strm, const ::scanner::generated::Measurement& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.xyPosition)
    && (strm << stru.zPos);
}

bool operator>>(Serializer& strm,  ::scanner::generated::Measurement& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    set_default(stru.xyPosition);
  } else {
    if (!(strm >> stru.xyPosition)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.zPos = 0;
  } else {
    if (!(strm >> stru.zPos)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::scanner::generated::Measurement>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  serialized_size(encoding, size, stru.value.xyPosition);
  primitive_serialized_size(encoding, size, stru.value.zPos);
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::scanner::generated::Measurement>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.xyPosition)
    && (strm << stru.value.zPos);
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::scanner::generated::Measurement>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    set_default(stru.value.xyPosition);
  } else {
    if (!(strm >> stru.value.xyPosition)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.zPos = 0;
  } else {
    if (!(strm >> stru.value.zPos)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::scanner::generated::Measurement> : MetaStruct {
  typedef  ::scanner::generated::Measurement T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::scanner::generated::Measurement& typed = *static_cast<const ::scanner::generated::Measurement*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strncmp(field, "xyPosition.", 11) == 0) {
      return getMetaStruct< ::scanner::generated::Position>().getValue(&typed.xyPosition, field + 11);
    }
    if (std::strcmp(field, "zPos") == 0) {
      return typed.zPos;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::scanner::generated::Measurement)");
  }

  Value getValue(Serializer& strm, const char* field, const TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      throw std::runtime_error("Unable to reader delimiter in getValue");
    }
  }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "xyPosition") {
      return getMetaStruct< ::scanner::generated::Position>().getValue(strm, subfield.c_str());
    } else {
      if (!gen_skip_over(strm, static_cast< ::scanner::generated::Position*>(0))) {
        throw std::runtime_error("Field 'xyPosition' could not be skipped");
      }
    }
    if (base_field == "zPos") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'zPos' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'zPos' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "xyPosition.", 11) == 0) {
      return make_struct_cmp(&T::xyPosition, getMetaStruct< ::scanner::generated::Position>().create_qc_comparator(field + 11), next);
    }
    if (std::strcmp(field, "zPos") == 0) {
      return make_field_cmp(&T::zPos, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::scanner::generated::Measurement)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"xyPosition", "zPos", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "xyPosition") == 0) {
      return &static_cast<const T*>(stru)->xyPosition;
    }
    if (std::strcmp(field, "zPos") == 0) {
      return &static_cast<const T*>(stru)->zPos;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::scanner::generated::Measurement)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "xyPosition") == 0) {
      static_cast<T*>(lhs)->xyPosition = *static_cast<const  ::scanner::generated::Position*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "zPos") == 0) {
      static_cast<T*>(lhs)->zPos = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::scanner::generated::Measurement)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "zPos") == 0) {
      return static_cast<const T*>(lhs)->zPos == static_cast<const T*>(rhs)->zPos;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::scanner::generated::Measurement)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::scanner::generated::Measurement>()
{
  static MetaStructImpl< ::scanner::generated::Measurement> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::scanner::generated::Measurement*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::scanner::generated::Measurement>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::scanner::generated::Measurement,  ::scanner::generated::Measurement > : public DynamicDataAdapter_T< ::scanner::generated::Measurement> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::scanner::generated::Measurement& value)
    : DynamicDataAdapter_T< ::scanner::generated::Measurement>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::scanner::generated::Measurement& value)
    : DynamicDataAdapter_T< ::scanner::generated::Measurement>(type, value)
  {
  }

  DDS::UInt32 get_item_count()
  {
    return 2;
  }

  DDS::DynamicData_ptr clone()
  {
    return new DynamicDataAdapterImpl(type_, value_);
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::scanner::generated::Measurement> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::scanner::generated::Measurement> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_complex_raw_value< ::scanner::generated::Position,  ::scanner::generated::Position>(method, dest, tk, value_.xyPosition, id);
      }
    case 1:
      {
        return get_simple_raw_value(method, dest, tk, value_.zPos, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_direct_complex_raw_value< ::scanner::generated::Position,  ::scanner::generated::Position>(method, value_.xyPosition, id, source, tk);
      }
    case 1:
      {
        return set_simple_raw_value(method, value_.zPos, id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::scanner::generated::Measurement,  ::scanner::generated::Measurement>(DDS::DynamicType_ptr type, const  ::scanner::generated::Measurement& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::scanner::generated::Measurement,  ::scanner::generated::Measurement>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::scanner::generated::Measurement,  ::scanner::generated::Measurement>(DDS::DynamicType_ptr type,  ::scanner::generated::Measurement& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::scanner::generated::Measurement,  ::scanner::generated::Measurement>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::scanner::generated::Measurement* get_dynamic_data_adapter_value< ::scanner::generated::Measurement,  ::scanner::generated::Measurement>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::scanner::generated::Measurement,  ::scanner::generated::Measurement> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Measurement */


/* Begin TYPEDEF: measurementsType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<scanner_generated_measurementsType_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(8, 180, 97, 209, 239, 55, 38, 17, 241, 20, 156, 232, 240, 149));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<scanner_generated_measurementsType_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void serialized_size(const Encoding& encoding, size_t& size, const  ::scanner::generated::measurementsType& seq)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(seq);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size_ulong(encoding, size);
  if (seq.length() == 0) {
    return;
  }
  for (CORBA::ULong i = 0; i < seq.length(); ++i) {
    serialized_size(encoding, size, seq[i]);
  }
}

bool operator<<(Serializer& strm, const  ::scanner::generated::measurementsType& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, seq);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  const CORBA::ULong length = seq.length();
  if (length > 10000) {
    return false;
  }
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm << seq[i])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm,  ::scanner::generated::measurementsType& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_seq = strm.rpos() + total_size;
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  if (length > strm.length()) {
    if (DCPS_debug_level >= 8) {
      ACE_DEBUG((LM_DEBUG, ACE_TEXT("(%P|%t) Invalid sequence length (%u)\n"), length));
    }
    return false;
  }
  CORBA::ULong new_length = length;
  if (length > seq.maximum()) {
    new_length = seq.maximum();
  }
  seq.length(new_length);
  for (CORBA::ULong i = 0; i < new_length; ++i) {
     if (!(strm >> seq[i])) {
      strm.set_construction_status(Serializer::ElementConstructionFailure);
      if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
        strm.skip(end_of_seq - strm.rpos());
      } else {
         ::scanner::generated::measurementsType::value_type tempvar;
        for (CORBA::ULong j = i + 1; j < length; ++j) {
          strm >> tempvar;
        }
      }
      return false;
    }
  }
  if (new_length != length) {
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      strm.skip(end_of_seq - strm.rpos());
    } else {
       ::scanner::generated::measurementsType::value_type tempvar;
      for (CORBA::ULong j = new_length + 1; j < length; ++j) {
        strm >> tempvar;
      }
    }
    strm.set_construction_status(Serializer::BoundConstructionFailure);
    return false;
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser,  ::scanner::generated::measurementsType*)
{
  ACE_UNUSED_ARG(ser);
  const Encoding& encoding = ser.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!ser.read_delimiter(total_size)) {
      return false;
    }
  }
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  for (ACE_CDR::ULong i = 0; i < length; ++i) {
    if (!gen_skip_over(ser, static_cast< ::scanner::generated::Measurement*>(0))) return false;
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::scanner::generated::measurementsType,  ::scanner::generated::measurementsType > : public DynamicDataAdapter_T< ::scanner::generated::measurementsType> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::scanner::generated::measurementsType& value)
    : DynamicDataAdapter_T< ::scanner::generated::measurementsType>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::scanner::generated::measurementsType& value)
    : DynamicDataAdapter_T< ::scanner::generated::measurementsType>(type, value)
  {
  }

  DDS::UInt32 get_item_count()
  {
    return value_.length();
  }

  DDS::MemberId get_member_id_at_index_impl(DDS::UInt32 index)
  {
    const DDS::UInt32 count = value_.length();
    if (!read_only_ && index >= count) {
      value_.length(index + 1);
      return index;
    }
    return check_index("get_member_id_at_index", index, count) == DDS::RETCODE_OK ? index : MEMBER_ID_INVALID;
  }

  DDS::DynamicData_ptr clone()
  {
    return new DynamicDataAdapterImpl(type_, value_);
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    ACE_UNUSED_ARG(ext);
    OpenDDS::DCPS::serialized_size(enc, size, value_);
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    ACE_UNUSED_ARG(ext);
    using namespace OpenDDS::DCPS;
    return ser << value_;
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    const DDS::ReturnCode_t rc = check_index(method, id, value_.length());
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    return get_complex_raw_value< ::scanner::generated::Measurement,  ::scanner::generated::Measurement>(method, dest, tk, value_[id], id);
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    rc = check_index(method, id, value_.length());
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    return set_direct_complex_raw_value< ::scanner::generated::Measurement,  ::scanner::generated::Measurement>(method, value_[id], id, source, tk);
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::scanner::generated::measurementsType,  ::scanner::generated::measurementsType>(DDS::DynamicType_ptr type, const  ::scanner::generated::measurementsType& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::scanner::generated::measurementsType,  ::scanner::generated::measurementsType>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::scanner::generated::measurementsType,  ::scanner::generated::measurementsType>(DDS::DynamicType_ptr type,  ::scanner::generated::measurementsType& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::scanner::generated::measurementsType,  ::scanner::generated::measurementsType>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::scanner::generated::measurementsType* get_dynamic_data_adapter_value< ::scanner::generated::measurementsType,  ::scanner::generated::measurementsType>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::scanner::generated::measurementsType,  ::scanner::generated::measurementsType> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: measurementsType */


/* Begin STRUCT: WaferHeightMap */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<scanner_generated_WaferHeightMap_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(51, 210, 176, 255, 207, 241, 98, 81, 72, 148, 20, 134, 122, 176));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<scanner_generated_WaferHeightMap_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::scanner::generated::WaferHeightMap& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"waferID",0},{"measurements",1},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct()) return false;
  XTypes::MemberId member_id;
  while (value_reader.begin_struct_member(member_id, helper)) {
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.waferID)) return false;
      break;
    }
    case 1: {
      if (!value_reader.begin_sequence()) return false;
      for (unsigned int i = 0; value_reader.elements_remaining(); ++i) {
        if (i >= value.measurements.maximum()) return false;
        const ACE_CDR::ULong len = value.measurements.length();
        value.measurements.length(len + 1);
        if (!value_reader.begin_element()) return false;
        if (!vread(value_reader, value.measurements[i])) return false;
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_sequence()) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::scanner::generated::WaferHeightMap& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_struct_member(XTypes::MemberDescriptorImpl("waferID", true));
  value_writer.write_int32(value.waferID);
  value_writer.end_struct_member();
  value_writer.begin_struct_member(XTypes::MemberDescriptorImpl("measurements", false));
  value_writer.begin_sequence();
  for (::CORBA::ULong i = 0; i != value.measurements.length(); ++i) {
    value_writer.begin_element(i);
    vwrite(value_writer, value.measurements[i]);
    value_writer.end_element();
  }
  value_writer.end_sequence();
  value_writer.end_struct_member();
  value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::scanner::generated::WaferHeightMap& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.waferID = 0;
  stru.measurements.length(0);
}

void serialized_size(const Encoding& encoding, size_t& size, const ::scanner::generated::WaferHeightMap& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.waferID);
  serialized_size(encoding, size, stru.measurements);
}

bool operator<<(Serializer& strm, const ::scanner::generated::WaferHeightMap& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.waferID)
    && (strm << stru.measurements);
}

bool operator>>(Serializer& strm,  ::scanner::generated::WaferHeightMap& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.waferID = 0;
  } else {
    if (!(strm >> stru.waferID)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.measurements.length(0);
  } else {
    if (!(strm >> stru.measurements)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::scanner::generated::WaferHeightMap>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.waferID);
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::scanner::generated::WaferHeightMap>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.waferID);
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::scanner::generated::WaferHeightMap>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.waferID = 0;
  } else {
    if (!(strm >> stru.value.waferID)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const ::scanner::generated::WaferHeightMap>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.waferID);
}

bool operator<<(Serializer& strm, const KeyOnly<const ::scanner::generated::WaferHeightMap>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.waferID);
}

bool operator>>(Serializer& strm, const KeyOnly< ::scanner::generated::WaferHeightMap>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.waferID = 0;
  } else {
    if (!(strm >> stru.value.waferID)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::scanner::generated::WaferHeightMap>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "waferID")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace scanner {
namespace generated {
::DDS::DataWriter_ptr WaferHeightMapTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<WaferHeightMap> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr WaferHeightMapTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<WaferHeightMap> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr WaferHeightMapTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<WaferHeightMap> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<WaferHeightMap, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& WaferHeightMapTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<WaferHeightMap>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<WaferHeightMapTypeSupportImpl> ts_init_scanner_generated_WaferHeightMap;
}

const OpenDDS::XTypes::TypeIdentifier& WaferHeightMapTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::scanner_generated_WaferHeightMap_xtag>();
}

const OpenDDS::XTypes::TypeMap& WaferHeightMapTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::scanner_generated_WaferHeightMap_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& WaferHeightMapTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& WaferHeightMapTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t WaferHeightMapTypeSupportImpl::encode_to_string(const WaferHeightMap& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    vwrite(jvw, in);
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t WaferHeightMapTypeSupportImpl::encode_to_bytes(const WaferHeightMap& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t WaferHeightMapTypeSupportImpl::decode_from_string(const char* in, WaferHeightMap_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new WaferHeightMap;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t WaferHeightMapTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, WaferHeightMap_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new WaferHeightMap();
  return ::DDS::RETCODE_UNSUPPORTED;
}

WaferHeightMapTypeSupport::_ptr_type WaferHeightMapTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::scanner::generated::WaferHeightMap> : MetaStruct {
  typedef  ::scanner::generated::WaferHeightMap T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::scanner::generated::WaferHeightMap& typed = *static_cast<const ::scanner::generated::WaferHeightMap*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "waferID") == 0) {
      return typed.waferID;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::scanner::generated::WaferHeightMap)");
  }

  Value getValue(Serializer& strm, const char* field, const TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      throw std::runtime_error("Unable to reader delimiter in getValue");
    }
  }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "waferID") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'waferID' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'waferID' could not be skipped");
      }
    }
    if (!gen_skip_over(strm, static_cast< ::scanner::generated::measurementsType*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "waferID") == 0) {
      return make_field_cmp(&T::waferID, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::scanner::generated::WaferHeightMap)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"waferID", "measurements", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "waferID") == 0) {
      return &static_cast<const T*>(stru)->waferID;
    }
    if (std::strcmp(field, "measurements") == 0) {
      return &static_cast<const T*>(stru)->measurements;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::scanner::generated::WaferHeightMap)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "waferID") == 0) {
      static_cast<T*>(lhs)->waferID = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "measurements") == 0) {
      static_cast<T*>(lhs)->measurements = *static_cast<const  ::scanner::generated::measurementsType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::scanner::generated::WaferHeightMap)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "waferID") == 0) {
      return static_cast<const T*>(lhs)->waferID == static_cast<const T*>(rhs)->waferID;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::scanner::generated::WaferHeightMap)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::scanner::generated::WaferHeightMap>()
{
  static MetaStructImpl< ::scanner::generated::WaferHeightMap> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::scanner::generated::WaferHeightMap*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::scanner::generated::WaferHeightMap>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::scanner::generated::WaferHeightMap,  ::scanner::generated::WaferHeightMap > : public DynamicDataAdapter_T< ::scanner::generated::WaferHeightMap> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::scanner::generated::WaferHeightMap& value)
    : DynamicDataAdapter_T< ::scanner::generated::WaferHeightMap>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::scanner::generated::WaferHeightMap& value)
    : DynamicDataAdapter_T< ::scanner::generated::WaferHeightMap>(type, value)
  {
  }

  DDS::UInt32 get_item_count()
  {
    return 2;
  }

  DDS::DynamicData_ptr clone()
  {
    return new DynamicDataAdapterImpl(type_, value_);
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::scanner::generated::WaferHeightMap> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      KeyOnly<const  ::scanner::generated::WaferHeightMap> key_only(value_);
      DCPS::serialized_size(enc, size, key_only);
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::scanner::generated::WaferHeightMap> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      KeyOnly<const  ::scanner::generated::WaferHeightMap> key_only(value_);
      return ser << key_only;
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.waferID, id);
      }
    case 1:
      {
        return get_complex_raw_value< ::scanner::generated::measurementsType,  ::scanner::generated::measurementsType>(method, dest, tk, value_.measurements, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.waferID, id, source, tk);
      }
    case 1:
      {
        return set_direct_complex_raw_value< ::scanner::generated::measurementsType,  ::scanner::generated::measurementsType>(method, value_.measurements, id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::scanner::generated::WaferHeightMap,  ::scanner::generated::WaferHeightMap>(DDS::DynamicType_ptr type, const  ::scanner::generated::WaferHeightMap& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::scanner::generated::WaferHeightMap,  ::scanner::generated::WaferHeightMap>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::scanner::generated::WaferHeightMap,  ::scanner::generated::WaferHeightMap>(DDS::DynamicType_ptr type,  ::scanner::generated::WaferHeightMap& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::scanner::generated::WaferHeightMap,  ::scanner::generated::WaferHeightMap>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::scanner::generated::WaferHeightMap* get_dynamic_data_adapter_value< ::scanner::generated::WaferHeightMap,  ::scanner::generated::WaferHeightMap>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::scanner::generated::WaferHeightMap,  ::scanner::generated::WaferHeightMap> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: WaferHeightMap */

/* End MODULE: generated */

/* End MODULE: scanner */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

namespace {
XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 0)()
{
  const unsigned char to_bytes[] = { 39, 0, 0, 0, 241, 48, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 129, 241, 1, 0, 0, 0, 16, 39, 0, 0, 241, 248, 246, 214, 124, 130, 218, 238, 220, 67, 58, 4, 117, 148, 168  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 0");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 1)()
{
  const unsigned char to_bytes[] = { 65, 0, 0, 0, 241, 81, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 33, 0, 4, 44, 215, 228, 229, 0, 25, 0, 0, 0, 1, 0, 0, 0, 1, 0, 241, 8, 180, 97, 209, 239, 55, 38, 17, 241, 20, 156, 232, 240, 149, 195, 123, 231, 77  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 1");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 2)()
{
  const unsigned char to_bytes[] = { 51, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 186, 193, 152, 114, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4, 98, 4, 137, 153  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 2");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 3)()
{
  const unsigned char to_bytes[] = { 67, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 2, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 1, 0, 241, 187, 197, 108, 182, 252, 161, 177, 226, 47, 20, 220, 110, 85, 170, 197, 210, 106, 102, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4, 49, 29, 250, 241  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 3");
  }
  return to;
}

XTypes::TypeMap OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map_private, 0)()
{
  XTypes::TypeMap tm;
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(8, 180, 97, 209, 239, 55, 38, 17, 241, 20, 156, 232, 240, 149))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 0)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(51, 210, 176, 255, 207, 241, 98, 81, 72, 148, 20, 134, 122, 176))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 1)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(187, 197, 108, 182, 252, 161, 177, 226, 47, 20, 220, 110, 85, 170))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 2)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(248, 246, 214, 124, 130, 218, 238, 220, 67, 58, 4, 117, 148, 168))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 3)();
  return tm;
}

}

const XTypes::TypeMap& OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)()
{
  static XTypes::TypeMap tm;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), tm);
  if (tm.empty()) {
    tm = OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map_private, 0)();
  }
  return tm;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

