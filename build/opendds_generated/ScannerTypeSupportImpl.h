/* -*- C++ -*- */
/* Generated by /home/rerun/Projects/OpenDDS/bin/opendds_idl version 3.27.0 (ACE version 6.5.20) running on input file /home/rerun/Projects/LithoFab/Scanner/build/Scanner.idl */
#ifndef OPENDDS_IDL_GENERATED_SCANNERTYPESUPPORTIMPL_H_USR63S
#define OPENDDS_IDL_GENERATED_SCANNERTYPESUPPORTIMPL_H_USR63S

#include <dds/Version.h>
#if !OPENDDS_VERSION_EXACTLY(3, 27, 0)
#  error "This file should be regenerated with opendds_idl"
#endif
#include <dds/DCPS/Definitions.h>

#include <dds/DdsDcpsC.h>

#include "ScannerC.h"
#include "ScannerTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/ValueDispatcher.h"
#include "dds/DCPS/ValueReader.h"
#include "dds/DCPS/ValueWriter.h"
#include "dds/DCPS/XTypes/DynamicDataAdapter.h"
#include "dds/DCPS/XTypes/TypeObject.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: scanner */



/* Begin MODULE: generated */



/* Begin CONST: WAFER_HEIGHTMAP_TOPIC */


/* End CONST: WAFER_HEIGHTMAP_TOPIC */


/* Begin CONST: MAX_MEASUREMENT_STEPS */


/* End CONST: MAX_MEASUREMENT_STEPS */


/* Begin STRUCT: Position */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct scanner_generated_Position_xtag {};
template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<scanner_generated_Position_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<scanner_generated_Position_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::scanner::generated::Position& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::scanner::generated::Position& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::scanner::generated::Position& stru);

void serialized_size(const Encoding& encoding, size_t& size, const ::scanner::generated::Position& stru);

bool operator<<(Serializer& strm, const ::scanner::generated::Position& stru);

bool operator>>(Serializer& strm,  ::scanner::generated::Position& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::scanner::generated::Position>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::scanner::generated::Position>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly< ::scanner::generated::Position>& stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct< ::scanner::generated::Position>();
bool gen_skip_over(Serializer& ser,  ::scanner::generated::Position*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::scanner::generated::Position,  ::scanner::generated::Position>(DDS::DynamicType_ptr type, const  ::scanner::generated::Position& value);

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::scanner::generated::Position,  ::scanner::generated::Position>(DDS::DynamicType_ptr type,  ::scanner::generated::Position& value);

template <>
const  ::scanner::generated::Position* get_dynamic_data_adapter_value< ::scanner::generated::Position,  ::scanner::generated::Position>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Position */


/* Begin STRUCT: Measurement */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct scanner_generated_Measurement_xtag {};
template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<scanner_generated_Measurement_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<scanner_generated_Measurement_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::scanner::generated::Measurement& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::scanner::generated::Measurement& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::scanner::generated::Measurement& stru);

void serialized_size(const Encoding& encoding, size_t& size, const ::scanner::generated::Measurement& stru);

bool operator<<(Serializer& strm, const ::scanner::generated::Measurement& stru);

bool operator>>(Serializer& strm,  ::scanner::generated::Measurement& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::scanner::generated::Measurement>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::scanner::generated::Measurement>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly< ::scanner::generated::Measurement>& stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct< ::scanner::generated::Measurement>();
bool gen_skip_over(Serializer& ser,  ::scanner::generated::Measurement*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::scanner::generated::Measurement,  ::scanner::generated::Measurement>(DDS::DynamicType_ptr type, const  ::scanner::generated::Measurement& value);

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::scanner::generated::Measurement,  ::scanner::generated::Measurement>(DDS::DynamicType_ptr type,  ::scanner::generated::Measurement& value);

template <>
const  ::scanner::generated::Measurement* get_dynamic_data_adapter_value< ::scanner::generated::Measurement,  ::scanner::generated::Measurement>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Measurement */


/* Begin TYPEDEF: measurementsType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct scanner_generated_measurementsType_xtag {};
template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<scanner_generated_measurementsType_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<scanner_generated_measurementsType_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void serialized_size(const Encoding& encoding, size_t& size, const  ::scanner::generated::measurementsType& seq);

bool operator<<(Serializer& strm, const  ::scanner::generated::measurementsType& seq);

bool operator>>(Serializer& strm,  ::scanner::generated::measurementsType& seq);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser,  ::scanner::generated::measurementsType*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::scanner::generated::measurementsType,  ::scanner::generated::measurementsType>(DDS::DynamicType_ptr type, const  ::scanner::generated::measurementsType& value);

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::scanner::generated::measurementsType,  ::scanner::generated::measurementsType>(DDS::DynamicType_ptr type,  ::scanner::generated::measurementsType& value);

template <>
const  ::scanner::generated::measurementsType* get_dynamic_data_adapter_value< ::scanner::generated::measurementsType,  ::scanner::generated::measurementsType>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: measurementsType */


/* Begin STRUCT: WaferHeightMap */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct scanner_generated_WaferHeightMap_xtag {};
template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<scanner_generated_WaferHeightMap_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<scanner_generated_WaferHeightMap_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::scanner::generated::WaferHeightMap& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::scanner::generated::WaferHeightMap& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::scanner::generated::WaferHeightMap& stru);

void serialized_size(const Encoding& encoding, size_t& size, const ::scanner::generated::WaferHeightMap& stru);

bool operator<<(Serializer& strm, const ::scanner::generated::WaferHeightMap& stru);

bool operator>>(Serializer& strm,  ::scanner::generated::WaferHeightMap& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::scanner::generated::WaferHeightMap>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::scanner::generated::WaferHeightMap>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly< ::scanner::generated::WaferHeightMap>& stru);

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const ::scanner::generated::WaferHeightMap>& stru);

bool operator<<(Serializer& strm, const KeyOnly<const ::scanner::generated::WaferHeightMap>& stru);

bool operator>>(Serializer& strm, const KeyOnly< ::scanner::generated::WaferHeightMap>& stru);

template <>
struct MarshalTraits< ::scanner::generated::WaferHeightMap> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(120008);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::scanner::generated::WaferHeightMap&) { return false; }
  static bool from_message_block( ::scanner::generated::WaferHeightMap&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace scanner {
namespace generated {
/// This structure supports use of std::map with one or more keys.
struct  WaferHeightMap_OpenDDS_KeyLessThan {
  bool operator()(const  ::scanner::generated::WaferHeightMap& v1, const  ::scanner::generated::WaferHeightMap& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.waferID < v2.waferID) return true;
    if (v2.waferID < v1.waferID) return false;
    return false;
  }
};
}
}


namespace scanner {
namespace generated {
class WaferHeightMapTypeSupportImpl;
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::scanner::generated::WaferHeightMap> {
  typedef  ::scanner::generated::WaferHeightMap MessageType;
  typedef  ::scanner::generated::WaferHeightMapSeq MessageSequenceType;
  typedef  ::scanner::generated::WaferHeightMapSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::scanner::generated::WaferHeightMapTypeSupport TypeSupportType;
  typedef  ::scanner::generated::WaferHeightMapTypeSupportImpl TypeSupportImplType;
  typedef  ::scanner::generated::WaferHeightMapDataWriter DataWriterType;
  typedef  ::scanner::generated::WaferHeightMapDataReader DataReaderType;
  typedef  ::scanner::generated::WaferHeightMap_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::scanner::generated::WaferHeightMap> KeyOnlyType;
  typedef OpenDDS::DCPS::scanner_generated_WaferHeightMap_xtag XtagType;

  static const char* type_name() { return "scanner::generated::WaferHeightMap"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace scanner {
namespace generated {
class  WaferHeightMapTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<WaferHeightMapTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl_T<WaferHeightMap>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<WaferHeightMap>
{
public:
  typedef WaferHeightMapTypeSupport TypeSupportType;
  typedef WaferHeightMapTypeSupport::_var_type _var_type;
  typedef WaferHeightMapTypeSupport::_ptr_type _ptr_type;

  WaferHeightMapTypeSupportImpl() {}
  virtual ~WaferHeightMapTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const WaferHeightMap& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const WaferHeightMap& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, WaferHeightMap_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, WaferHeightMap_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static WaferHeightMapTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct< ::scanner::generated::WaferHeightMap>();
bool gen_skip_over(Serializer& ser,  ::scanner::generated::WaferHeightMap*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::scanner::generated::WaferHeightMap,  ::scanner::generated::WaferHeightMap>(DDS::DynamicType_ptr type, const  ::scanner::generated::WaferHeightMap& value);

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::scanner::generated::WaferHeightMap,  ::scanner::generated::WaferHeightMap>(DDS::DynamicType_ptr type,  ::scanner::generated::WaferHeightMap& value);

template <>
const  ::scanner::generated::WaferHeightMap* get_dynamic_data_adapter_value< ::scanner::generated::WaferHeightMap,  ::scanner::generated::WaferHeightMap>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: WaferHeightMap */

/* End MODULE: generated */

/* End MODULE: scanner */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif /* OPENDDS_IDL_GENERATED_SCANNERTYPESUPPORTIMPL_H_USR63S */
